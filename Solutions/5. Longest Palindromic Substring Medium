/*Given a string s, return the longest 
palindromic
 
substring
 in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.*/

class Solution {
public:
    string longestPalindrome(string s) {
        string ans;
        for(int i = 0;i<s.length();i++)
        {
            //odd length palindrome
            int left = i;
            int right = i;
            while(left>=0 && right < s.size() && s[left] == s[right])
            {
                if( (right-left+1)>ans.length() )
                {
                    //this is our new potention answer
                    ans.erase();
                    cout <<"Potential answer is "<< s.substr(left, right-left+1) <<"\n";
                    ans.append(s.substr(left, right-left+1));
                }
                left--; right++;
            }
    
            //even length palindrome
            left = i;
            right = i+1;
            while(left>=0 && right < s.size() && s[left] == s[right])
            {
                if( (right-left+1)>ans.length())
                {
                    //this is our new potention answer
                    ans.erase();
                    cout <<"Potential answer is "<< s.substr(left, right-left+1) <<"\n";
                    ans.append(s.substr(left, right-left+1));
                }
                left--; right++;
                
            }
        }
        return ans;
    }
};
