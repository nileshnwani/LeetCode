/*The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively./
class Solution {
public:
    bool column(int col, int n, vector<string> temp){
        for(int i = 0; i < n; i++){
            if(temp[i][col] == 'Q'){
                return false;
            }
        }
        
        return true;
    }
    
    bool diagonal(int row, int col, int n, vector<string> temp){
        int trow = row, tcol = col;
        
        // left top check
        while(trow >= 0 && tcol >=0){
            if(temp[trow][tcol] == 'Q'){
                return false;
            }
            trow--;
            tcol--;
        }
        
        // right bottom check
        trow = row, tcol = col;
        while(trow < n && tcol < n){
            if(temp[trow][tcol] == 'Q'){
                return false;
            }
            trow++;
            tcol++;
        }
